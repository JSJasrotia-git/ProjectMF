Git Course Udemy: https://www.udemy.com/share/101tpK3@ktnil1NcDHhVFYjPoM9TFhm0nvyJOG1YO9N_MDlg6spOLKRODNx2C0J5CFIkqz0_yA==/
Git Cheat commands: 
	https://github.com/joshnh/Git-Commands
	https://education.github.com/git-cheat-sheet-education.pdf
	https://www.atlassian.com/git/tutorials/atlassian-git-cheatsheet

Programming languages by popularity:
	https://www.tiobe.com/tiobe-index/
	https://survey.stackoverflow.co/2025/developers/
	https://www.index.dev/blog/most-popular-programming-languages-
Data for MF Project:
	Approach#1:
		https://api.mfapi.in/mf - to get all the codes for listed Mutual funds. For CURL---> use: curl -o "C:\Users\Primary\Downloads\Mutual_Fund		\Data\apimfapii" "https://api.mfapi.in/mf" and then parse through the language JSON library.
		https://api.mfapi.in/mf/100027 - to get all the historical data for the given fund code, see above call to get the fund code.
		If you want to use apimfapi for getting the MF codes and scheme NAV then use this "Data\AMFI\Download_apimfapi.txt" file, you will have to 		rename this file to .bat extension and run on a command line for Windows. Once this .bat file is run, it will create 37000+ JSON files. Post 		this JSON file creation use Python code files to create the DB  tables (PostGres, create a database by name "projectmf" and other parameters 		as mentioned in python code files). Much of this is self explanatory. Daily NAV's can be fetched using the call : 				        https://api.mfapi.in/mf/148036/latest. Also AMFI provides daily data through this API: https://www.amfiindia.com/spages/NAVAll.txt

	Approach#2: Only explored till downloading all the CSV's using the same curl batch file, details below:
		https://portal.amfiindia.com/DownloadNAVHistoryReport_Po.aspx?mf=62&frmdt=01-Jan-1990&todt=05-Aug-2025
		Check folder AMFI for the CURL file, rename the DownloadMF_data.txt file to DownloadMF_data.bat for windows to download the data in your 		folder. This approach is not pursued further. 

To verify the JSON, use this website: https://jsonlint.com/
More about JSON: https://www.json.org/json-en.html


Way to build this project:
1) DB Setup: Clone the project / Pull the git repo.
2) Get the JSON Data:  See Approach#1 above
3) Setup your local IDE. I am using VSCode.
4) Execution Sequence:
	a) Execute the file: create_mf_codes_tables.py. This is available under the folder "Python_code\DB\Create"
	b) Execute the file: pushmfcodes_todb.py. This is available under the folder "Python_code".
	c) Execute the file: create_mf_schemes_tables.py. This is available under the folder "Python_code\DB\Create". Even if you don't execute 	   	   this file, it should be okay as the specific DB's get created as we populate the NAV's using the next step. This is very time consuming as it 	   creates around 37000 tables in the Postgres.
	d) Execute the file "pushnav_todb.py". This creates the DB tables for specific schemes (if the tables don't exit) and populates the data (Date and 	   NAV) from the corresponding JSON files.
	5) TBD: Understanding ngnix and building the front end. Code is dirty, needs modularization and clean up.



nginx notes:
https://www.youtube.com/watch?v=9jZEfW8h5fQ   .....https://github.com/iam-veeramalla/nginx-zero-to-hero
Can be used as a webserver / reverse proxy, load balancer

Fr building angular20 project, use command:ng b --output-path docs --base-href /mfanalysis/
ISTIO:
https://www.youtube.com/watch?v=eSNetKBe7Z8


angular NodeJS, Postgres:
https://www.youtube.com/watch?v=xjgCkEfUIwE
Angular 20: https://www.youtube.com/watch?v=UORr9PHUYB0&list=PL_qizAfcpJ-N8kYyBAuF13e3jCqIB0t7q&index=8

DB Notes:
connecting to DB:
2 ways:
1) using commandline: run Psql and supply the user name and password, leave the rest as it is.
2) start pgadmin 4 app - this is the user interface based windows app.

To change password: use the following command
\password : and specify the new password.

for my instance:
leave everything empty and for password specify : password; the username is postgres.



select datname from pg_database; - to fetch the databases in the DB.
the queries are not case sensitive but advised to use upper case. Until a ; is not used the query is not executed and query can be multi line.

command line for my DB
LISTING ALL THE DB'S IN POSTGRES.
1) select datname from pg_database;
2) ON THE COMMAND LINE JUST "\L" ALSO PROVIDES THE LIST OF DATABASES THAT EXIT IN THE SYSTEM.

CREATING A DATABASE:
1) CREATE DATABASE <DATABASE NAME>


TO CONNECT TO A SPECIFIC db FROM COMMAND LINE USE THE FOLLOWING
1)\C <DB NAME>



CREATE TABLE:
1) CREATE TABLE <TABLE_NAME> ( FIELD NAME, FIELD TYPE,.......);

INSERT INTO TABLE:
1) INSERT INTO <TABLE_NAME> (COLUMN NAMES) VALUES (VALUES), (VALUES),...CAN BE MULTIPLE VALUES; - COLUMN NAMES CAN BE SKIPPED IF WE ARE PROVIDING ALL THE FIELDS.


READ FROM TABLE:
1) SELECT * FROM TABLE - TO READ ALL RECORDS.
2) SELECT <SPECIFIC COLUMN NAME/S>{COLUMN NAME 1, COLUMN NAME 2) FROM TABLE TO READ SPECIFIC FIELDS.

UPDATE TABLE:
1) UPDATE <TABLE NAME> SET <FIELD NAME> = '<NEW VALUE>' WHERE  <FIELD NAME> = FIELD VALUE; 

DELETE FROM TABLE:
1) DELETE FROM <TABLE NAME> WHERE FIELD ID = FIELD VALUE;
